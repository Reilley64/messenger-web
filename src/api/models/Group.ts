/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageRequest } from './MessageRequest';
import {
    MessageRequestFromJSON,
    MessageRequestFromJSONTyped,
    MessageRequestToJSON,
} from './MessageRequest';
import type { GroupUser } from './GroupUser';
import {
    GroupUserFromJSON,
    GroupUserFromJSONTyped,
    GroupUserToJSON,
} from './GroupUser';

/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof Group
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Group
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    name?: string;
    /**
     * 
     * @type {Array<GroupUser>}
     * @memberof Group
     */
    users: Array<GroupUser>;
    /**
     * 
     * @type {MessageRequest}
     * @memberof Group
     */
    messageRequest?: MessageRequest;
}

/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): value is Group {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('users' in value) || value['users'] === undefined) return false;
    return true;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'name': json['name'] == null ? undefined : json['name'],
        'users': ((json['users'] as Array<any>).map(GroupUserFromJSON)),
        'messageRequest': json['messageRequest'] == null ? undefined : MessageRequestFromJSON(json['messageRequest']),
    };
}

export function GroupToJSON(value?: Group | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'name': value['name'],
        'users': ((value['users'] as Array<any>).map(GroupUserToJSON)),
        'messageRequest': MessageRequestToJSON(value['messageRequest']),
    };
}

