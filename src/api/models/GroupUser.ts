/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface GroupUser
 */
export interface GroupUser {
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof GroupUser
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof GroupUser
     */
    updatedAt: Date;
    /**
     * 
     * @type {User}
     * @memberof GroupUser
     */
    user: User;
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    nickname?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GroupUser
     */
    admin?: boolean;
}

/**
 * Check if a given object implements the GroupUser interface.
 */
export function instanceOfGroupUser(value: object): value is GroupUser {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function GroupUserFromJSON(json: any): GroupUser {
    return GroupUserFromJSONTyped(json, false);
}

export function GroupUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupUser {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'user': UserFromJSON(json['user']),
        'nickname': json['nickname'] == null ? undefined : json['nickname'],
        'admin': json['admin'] == null ? undefined : json['admin'],
    };
}

export function GroupUserToJSON(value?: GroupUser | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'user': UserToJSON(value['user']),
        'nickname': value['nickname'],
        'admin': value['admin'],
    };
}

