/* tslint:disable */
/* eslint-disable */
/**
 * Messenger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GroupResponseDto,
  MessageRequestDto,
  MessageResponseDto,
} from '../models/index';
import {
    GroupResponseDtoFromJSON,
    GroupResponseDtoToJSON,
    MessageRequestDtoFromJSON,
    MessageRequestDtoToJSON,
    MessageResponseDtoFromJSON,
    MessageResponseDtoToJSON,
} from '../models/index';

export interface CreateGroupMessageRequest {
    groupId: string;
    messageRequestDto: MessageRequestDto;
}

export interface GetGroupRequest {
    groupId: string;
}

export interface GetGroupMessagesRequest {
    groupId: string;
}

/**
 * 
 */
export class GroupRestControllerApi extends runtime.BaseAPI {

    /**
     */
    async createGroupMessageRaw(requestParameters: CreateGroupMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponseDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling createGroupMessage().'
            );
        }

        if (requestParameters['messageRequestDto'] == null) {
            throw new runtime.RequiredError(
                'messageRequestDto',
                'Required parameter "messageRequestDto" was null or undefined when calling createGroupMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/{group_id}/messages`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageRequestDtoToJSON(requestParameters['messageRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createGroupMessage(requestParameters: CreateGroupMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponseDto> {
        const response = await this.createGroupMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupResponseDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/{group_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getGroup(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupResponseDto> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupMessagesRaw(requestParameters: GetGroupMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MessageResponseDto>>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getGroupMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/groups/{group_id}/messages`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageResponseDtoFromJSON));
    }

    /**
     */
    async getGroupMessages(requestParameters: GetGroupMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MessageResponseDto>> {
        const response = await this.getGroupMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
