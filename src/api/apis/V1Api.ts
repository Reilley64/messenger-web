/* tslint:disable */
/* eslint-disable */
/**
 * Messenger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GroupResponseDto,
  MessageRequestDto,
  MessageRequestRequestDto,
  MessageRequestResponseDto,
  MessageResponseDto,
  MessageWithGroupResponseDto,
  UserRequestDto,
  UserResponseDto,
} from '../models/index';
import {
    GroupResponseDtoFromJSON,
    GroupResponseDtoToJSON,
    MessageRequestDtoFromJSON,
    MessageRequestDtoToJSON,
    MessageRequestRequestDtoFromJSON,
    MessageRequestRequestDtoToJSON,
    MessageRequestResponseDtoFromJSON,
    MessageRequestResponseDtoToJSON,
    MessageResponseDtoFromJSON,
    MessageResponseDtoToJSON,
    MessageWithGroupResponseDtoFromJSON,
    MessageWithGroupResponseDtoToJSON,
    UserRequestDtoFromJSON,
    UserRequestDtoToJSON,
    UserResponseDtoFromJSON,
    UserResponseDtoToJSON,
} from '../models/index';

export interface ApproveMessageRequestRequest {
    messageRequestId: string;
}

export interface CreateGroupMessageRequest {
    groupId: string;
    messageRequestDto: MessageRequestDto;
}

export interface CreateMessageRequestRequest {
    messageRequestRequestDto: MessageRequestRequestDto;
}

export interface CreateUserRequest {
    userRequestDto: UserRequestDto;
}

export interface GetGroupRequest {
    groupId: string;
}

export interface GetGroupMessagesRequest {
    groupId: string;
}

export interface GetMessageRequestRequest {
    messageRequestId: string;
}

export interface GetUserRequest {
    userId: string;
}

/**
 * 
 */
export class V1Api extends runtime.BaseAPI {

    /**
     */
    async approveMessageRequestRaw(requestParameters: ApproveMessageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageRequestResponseDto>> {
        if (requestParameters['messageRequestId'] == null) {
            throw new runtime.RequiredError(
                'messageRequestId',
                'Required parameter "messageRequestId" was null or undefined when calling approveMessageRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/message-requests/{message_request_id}/approve`.replace(`{${"message_request_id"}}`, encodeURIComponent(String(requestParameters['messageRequestId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageRequestResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async approveMessageRequest(requestParameters: ApproveMessageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageRequestResponseDto> {
        const response = await this.approveMessageRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGroupMessageRaw(requestParameters: CreateGroupMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponseDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling createGroupMessage().'
            );
        }

        if (requestParameters['messageRequestDto'] == null) {
            throw new runtime.RequiredError(
                'messageRequestDto',
                'Required parameter "messageRequestDto" was null or undefined when calling createGroupMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/{group_id}/messages`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageRequestDtoToJSON(requestParameters['messageRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createGroupMessage(requestParameters: CreateGroupMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponseDto> {
        const response = await this.createGroupMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createMessageRequestRaw(requestParameters: CreateMessageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageRequestResponseDto>> {
        if (requestParameters['messageRequestRequestDto'] == null) {
            throw new runtime.RequiredError(
                'messageRequestRequestDto',
                'Required parameter "messageRequestRequestDto" was null or undefined when calling createMessageRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/message-requests/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageRequestRequestDtoToJSON(requestParameters['messageRequestRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageRequestResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createMessageRequest(requestParameters: CreateMessageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageRequestResponseDto> {
        const response = await this.createMessageRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters['userRequestDto'] == null) {
            throw new runtime.RequiredError(
                'userRequestDto',
                'Required parameter "userRequestDto" was null or undefined when calling createUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRequestDtoToJSON(requestParameters['userRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAuthUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/user/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAuthUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.getAuthUserRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupResponseDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/{group_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getGroup(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupResponseDto> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupMessagesRaw(requestParameters: GetGroupMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MessageResponseDto>>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getGroupMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/{group_id}/messages`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageResponseDtoFromJSON));
    }

    /**
     */
    async getGroupMessages(requestParameters: GetGroupMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MessageResponseDto>> {
        const response = await this.getGroupMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMessageRequestRaw(requestParameters: GetMessageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageRequestResponseDto>> {
        if (requestParameters['messageRequestId'] == null) {
            throw new runtime.RequiredError(
                'messageRequestId',
                'Required parameter "messageRequestId" was null or undefined when calling getMessageRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/message-requests/{message_request_id}`.replace(`{${"message_request_id"}}`, encodeURIComponent(String(requestParameters['messageRequestId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageRequestResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getMessageRequest(requestParameters: GetMessageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageRequestResponseDto> {
        const response = await this.getMessageRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MessageWithGroupResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/messages/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageWithGroupResponseDtoFromJSON));
    }

    /**
     */
    async getMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MessageWithGroupResponseDto>> {
        const response = await this.getMessagesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
