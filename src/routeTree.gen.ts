/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as IndexImport } from './routes/index'
import { Route as UUserIdImport } from './routes/u.$userId'
import { Route as RRequestIdImport } from './routes/r.$requestId'
import { Route as GGroupIdImport } from './routes/g.$groupId'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UUserIdRoute = UUserIdImport.update({
  path: '/u/$userId',
  getParentRoute: () => rootRoute,
} as any)

const RRequestIdRoute = RRequestIdImport.update({
  path: '/r/$requestId',
  getParentRoute: () => rootRoute,
} as any)

const GGroupIdRoute = GGroupIdImport.update({
  path: '/g/$groupId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/g/$groupId': {
      id: '/g/$groupId'
      path: '/g/$groupId'
      fullPath: '/g/$groupId'
      preLoaderRoute: typeof GGroupIdImport
      parentRoute: typeof rootRoute
    }
    '/r/$requestId': {
      id: '/r/$requestId'
      path: '/r/$requestId'
      fullPath: '/r/$requestId'
      preLoaderRoute: typeof RRequestIdImport
      parentRoute: typeof rootRoute
    }
    '/u/$userId': {
      id: '/u/$userId'
      path: '/u/$userId'
      fullPath: '/u/$userId'
      preLoaderRoute: typeof UUserIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/g/$groupId': typeof GGroupIdRoute
  '/r/$requestId': typeof RRequestIdRoute
  '/u/$userId': typeof UUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/g/$groupId': typeof GGroupIdRoute
  '/r/$requestId': typeof RRequestIdRoute
  '/u/$userId': typeof UUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/g/$groupId': typeof GGroupIdRoute
  '/r/$requestId': typeof RRequestIdRoute
  '/u/$userId': typeof UUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/settings' | '/g/$groupId' | '/r/$requestId' | '/u/$userId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/settings' | '/g/$groupId' | '/r/$requestId' | '/u/$userId'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/g/$groupId'
    | '/r/$requestId'
    | '/u/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRoute
  GGroupIdRoute: typeof GGroupIdRoute
  RRequestIdRoute: typeof RRequestIdRoute
  UUserIdRoute: typeof UUserIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRoute,
  GGroupIdRoute: GGroupIdRoute,
  RRequestIdRoute: RRequestIdRoute,
  UUserIdRoute: UUserIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/g/$groupId",
        "/r/$requestId",
        "/u/$userId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/g/$groupId": {
      "filePath": "g.$groupId.tsx"
    },
    "/r/$requestId": {
      "filePath": "r.$requestId.tsx"
    },
    "/u/$userId": {
      "filePath": "u.$userId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
